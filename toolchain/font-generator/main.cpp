#include <string>
#include <iostream>
#include <fstream>
#include <filesystem>
#include <cerrno>
#include <png++/png.hpp>

std::string executableName = "";

constexpr int characters=12;
constexpr int height=40;
constexpr int width=24;

std::string sourceImage = "";
std::string outputDirectory = "output";

int convertBitmapFont(std::string source, std::string output);

void autoDisclaimer(std::ostream& stream)
{
	stream<<"// This file was automatically generated by "<<executableName<<"\n";
}

int main(int argc, char* argv[])
{
	if(argc!=3)
		return 1;
	executableName = argv[0];
	sourceImage = argv[1];
	outputDirectory = argv[2];

	if(!std::filesystem::exists(sourceImage))
		return ENOENT;
	if(!std::filesystem::exists(outputDirectory))
		return ENOENT;
	if(!std::filesystem::is_directory(outputDirectory))
		return ENOTDIR;

	auto ret = convertBitmapFont(sourceImage,outputDirectory);
	std::cout<<"Done generating font"<<std::endl;
	return ret;
}
//
int convertBitmapFont(std::string source, std::string output)
{
	static const std::string headerName = "font.h";
	static const std::string sourceName = "font.cpp";
	static const std::string fontArrayName = "font";

	std::ofstream headerout(output + "/" + headerName);
	std::ofstream srcout(output + "/" + sourceName);
	png::image<png::rgb_pixel> input(source);

	//TODO assert that the image dimensions match arguments

	autoDisclaimer(headerout);
	headerout	<<"\
#ifndef FONT_H\n\
#define FONT_H "<<height<<"\n\
#define FONT_W "<<width<<"\n\
#define FONT_BYTES (FONT_H * FONT_W / 32)\n\
#include <cstdint>\n\
const extern uint32_t "<<fontArrayName<<"["<<characters<<"]["<<width*height/32<<"];\n\
#endif\n\
";


	autoDisclaimer(srcout);
	srcout<<"\
#include \""<<headerName<<"\"\n\n\
const extern uint32_t "<<fontArrayName<<"["<<characters<<"]["<<width*height/32<<"]={\n";

	for(int c=0; c < characters; c++)
	{
		const int offset = c*width;

		srcout<<"\t{\n";

		int bitcount = 0;
		std::string byteBuilder="0b";

		for(int y=0;y<height;y++)
		{
			for(int x=0;x<width;x++)
			{
				const auto pixel = input.get_pixel(x+offset,y);
				const auto sum = pixel.red + pixel.green + pixel.blue;
				bool thisBit=(sum>128*3);
				if(bitcount==32)
				{
					bitcount=0;
					srcout<<byteBuilder<<", ";
					byteBuilder="0b";
				}
				bitcount++;
				byteBuilder+=thisBit?"1":"0";

			}
		}

		srcout<<"},\n";

	}

	srcout<<"};\n";
	return 0;
}
